/* groovylint-disable LineLength */
pipeline {
    agent any
    environment {
        JENKINS_PAT = credentials('PAT_Jenkins')
    }
    triggers {
        cron('H 0 * * 1-5')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
        parallelsAlwaysFailFast()
        timestamps()
    }
    stages {
        stage('Build Binaries') {
            steps {
                script {
                    echo 'Build Binaries'
                    sh label:
                    'Step Builds',
                    script:'''
                    set -x
                    pwd
                    ls -l
                    sed -i 's/"Owner": "default"/"Owner": "Nightly"/' ./Docker/platformservices/InitializationVector.json
                    ./CreateDailyBuild.sh
                    cp ./Binary/DatabaseTools ./Binary/platformservices
                    '''
                }
            }
            post {
                failure {
                    echo 'Failed during Build Binaries stage'
                }
            }
        }
        stage('Build Data Services') {
            steps {
                pwd(tmp: true)
                sh '''
                pwd
                ls -l
                '''
                script {
                    echo 'Starting to build docker image: Data Services Api Portal Server '
                    echo ' Build Data Services Docker Image'
                    sh label:
                    'Build Docker',
                    script:'''
                    pwd
                    cd Docker/
                    ./BuildImages.sh -i dataservices
                    '''
                    echo 'Start Data Services Container'
                    sh label:
                    'Run Data Services Docker',
                    script:'''
                    pwd
                    cd Docker/
                    ./RunService.sh -s dataservices -d -c
                    docker ps -q
                    sleep 5
                    '''
                }
                script {
                    try {
                        echo 'Load Database'
                        sh '''
                        docker exec -w /app dataservices sh -c "pwd"
                        docker exec -w /app dataservices sh -c "ls -l"
                        docker exec -w /app dataservices sh -c "ps -ef"
                        '''
                    } catch (exception) {
                        echo getStackTrace(exception)
                        echo 'Error detected, retrying...'
                    }
                }
                echo 'Data Services Portal Server is Deployed and Ready to use'
                script {
                    echo ' Copy Orchestrator Folder to tmp directory'

                    sh 'cp -r EndPointTools/Orchestrator/ /datadrive/jenkins_workspace/workspace/tmp_engineering/'
                }
            }
            post {
                failure {
                    echo 'Failed Setting Data Services'
                }
            }
        }
        stage('Build Platform Services') {
            steps {
                pwd(tmp: true)
                sh '''
                pwd
                ls -l
                '''
                script {
                    echo 'Starting to build docker image: Platform Services Server '
                    echo ' Build Platform Services Docker Image'
                    sh label:
                    'Build Docker',
                    script:'''
                    pwd
                    cd Docker/
                    ./BuildImages.sh -i platformservices
                    '''
                    echo 'Start Platform Services Container'
                    sh label:
                    'Run Platform Services Docker',
                    script:'''
                    pwd
                    cd Docker/
                    ./RunService.sh -s platformservices -d -c
                    docker ps -q
                    sleep 5
                    '''
                }
                script {
                    try {
                        echo 'Load Database'
                        sh '''
                        docker exec -w /app platformservices sh -c "pwd"
                        docker exec -w /app platformservices sh -c "ls -l"
                        docker exec -w /app platformservices sh -c "ps -ef"
                        docker exec -w /app platformservices sh -c "sudo ./DatabaseTools --PortalIp=127.0.0.1 --Port=6200"
                        '''
                    } catch (exception) {
                        echo getStackTrace(exception)
                        echo 'Error detected, retrying...'
                        sh '''
                        docker exec -w /app platformservices sh -c "sudo ./DatabaseTools --PortalIp=127.0.0.1 --Port=6200 -d"
                        docker exec -w /app platformservices sh -c "sudo ./DatabaseTools --PortalIp=127.0.0.1 --Port=6200"
                        '''
                    }
                }
                echo 'Platform Services Server is Deployed and Ready to use'
                script {
                    echo ' Copy Orchestrator Folder to tmp directory'

                    sh 'cp -r EndPointTools/Orchestrator/ /datadrive/jenkins_workspace/workspace/tmp_engineering/'
                }
            }
            post {
                failure {
                    echo 'Failed Setting Platform Services'
                }
            }
        }
        stage('Run SailApiTAP') {
            steps {
                echo 'Starting to build docker image for test: SAILTAP'
                sh 'ls -l'
                script {
                    docker.build('ubuntu-sailtap:1.0', '--build-arg git_personal_token=${JENKINS_PAT} -f Jenkins/Nightly_Tests/Dockerfile.test .')
                    sh 'docker run --name ubuntu_tst_bash -dit -v /datadrive/jenkins_workspace/workspace/tmp_engineering:/tmp_engineering ubuntu-sailtap:1.0 /bin/bash'
                    echo ' Update Test Repo'
                    sh label:
                    'git pull Test Repo',
                    script:'''
                    docker exec -w /Test/ ubuntu_tst_bash pwd
                    docker exec -w /Test/ ubuntu_tst_bash ls -l
                    docker exec -w /Test/ ubuntu_tst_bash git pull
                    docker exec -w /tmp_engineering/Orchestrator/sail/ ubuntu_tst_bash ls -l
                    '''
                    echo 'Step Running the Tests'
                    sh label:
                    'Running Tests',
                    script:'''
                    docker exec -w /Test/ ubuntu_tst_bash pytest /Test/StanleyLin/test_api/ --ip 10.0.0.5 -m "active or active_m5" -sv --junitxml=test-results.xml
                    '''
                }
            }
            post {
                always {
                    // Post xml results of pytest run to Jenkins
                    echo 'End of stage test in Run SAILTAP!'
                    sh'''
                    docker cp ubuntu_tst_bash:/Test/test-results.xml .
                    docker cp platformservices:/app/restportal.log .
                    docker cp dataservices:/app/databasegateway.log .
                    '''
                    junit '*.xml'
                    archiveArtifacts artifacts: '*.log'
                }
                failure {
                    echo 'Failed during Run SailApiTAP stage'
                }
            }
        }
    }
    post {
        always {
            echo 'Step Tear down'
            sh label:
            'Teardown',
            script:'''
            set -x
            docker kill $(docker ps -q)
            docker rm $(docker ps -a -q)
            cd /datadrive/jenkins_workspace/workspace/tmp_engineering/ && tar -cvf Nightly_Orchestrator.tar Orchestrator/
            test -d "/datadrive/jenkins_workspace/workspace/tmp_engineering/Orchestrator/" && rm -rf "/datadrive/jenkins_workspace/workspace/tmp_engineering/Orchestrator/"
            '''
            cleanWs()
        }
    }
}
