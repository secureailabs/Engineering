# Engineering
# wf_dispatch_deploy_platform.yml
# Deployment of Platform Services [api + Frontend] to a specified Subscription in Azure
#
# Copyright (C) 2022 Secure Ai Labs, Inc. All Rights Reserved.
# Private and Confidential. Internal Use Only.
#
#     This software contains proprietary information which shall not
#     be reproduced or transferred to other documents and shall not
#     be disclosed to others for any purpose without
#     prior written permission of Secure Ai Labs, Inc.
#
#

name: "Deploy Platform to Azure"

permissions:
  checks: read

on:
  workflow_call:
    inputs:
      subscription:
        description: "Choose Subscription"
        required: true
        type: string
        default: "Development"
      purpose:
        description: "Purpose of Deployment"
        required: true
        type: string
        default: "CI_TEST"
      owner:
        description: "Owner of Deployment"
        required: true
        type: string
        default: "CI_RUNNER"
      api_services_tag:
        description: "API Services Docker image Tag"
        required: true
        type: string
        default: "default"
      audit_service_tag:
        description: "Audit Service Docker image Tag"
        required: true
        type: string
        default: "default"
      aggregator_scn_tag:
        description: "Aggregator SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      participant_scn_tag:
        description: "Participant SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      preload_dataset:
        description: "Preload dataset with DatasetTool"
        required: true
        type: boolean
        default: false
      run_tests:
        description: Runs tests
        required: true
        type: boolean
        default: false
      deprovision_after:
        description: Deprovision after deployment
        required: true
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      subscription:
        description: "Choose Subscription"
        required: true
        type: choice
        default: "Development"
        options:
          - "Development"
          - "Release Candidate"
          - "ProductionGA"
      purpose:
        description: "Purpose of Deployment"
        required: true
        type: string
        default: "CI_TEST"
      api_services_tag:
        description: "API Services Docker image Tag"
        required: true
        type: string
        default: "default"
      audit_service_tag:
        description: "Audit Service Docker image Tag"
        required: true
        type: string
        default: "default"
      aggregator_scn_tag:
        description: "Aggregator SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      participant_scn_tag:
        description: "Participant SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      owner:
        description: "Owner of Deployment"
        required: true
        type: string
        default: "CI_RUNNER"
      preload_dataset:
        description: "Preload dataset with DatasetTool"
        required: true
        type: boolean
        default: false
      run_tests:
        description: Runs tests [Requires preloaded dataset]
        required: true
        type: boolean
        default: false
      deprovision_after:
        description: Deprovision after deployment
        required: true
        type: boolean
        default: false

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_DEPLOYPLATFORM_AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_DEPLOYPLATFORM_AZURE_CLIENT_SECRET }}
  AZURE_OBJECT_ID: ${{ secrets.AZURE_OBJECT_ID }}
  PUBLIC_IP: "False"

jobs:
  Deploy_Platform:
    runs-on: [self-hosted, Linux, x64, docker, Platform]
    container:
      image: developmentdockerregistry.azurecr.io/ciubuntu:v0.1.0_5f85ced
      credentials:
          username: ${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_PASSWORD }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Options selected
        run: |
          echo "Subscription: ${{ inputs.subscription }}"
          echo "Preload Datasets: ${{ inputs.preload_dataset }}"
          echo "Purpose of Deployment: ${{ inputs.purpose }}"
          echo "Owner of Deployment: ${{ inputs.owner }}"
          echo "Container used [api_services_tag]: $ {{ inputs.api_services_tag }}"
          echo "Container used [audit_service_tag]: $ {{ inputs.audit_service_tag }}"
          echo "Container used [aggregator_scn_tag]: $ {{ inputs.aggregator_scn_tag }}"
          echo "Container used [participant_scn_tag]: $ {{ inputs.participant_scn_tag }}"
          echo "Run Tests after Deployment: ${{ inputs.run_tests }}"
          echo "Deprovision when finished: ${{ inputs.deprovision_after }}"

      - name: Check out source repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_BUILD_TOKEN }}
          persist-credentials: true
          submodules: true

      - name: Determine Subscription
        run: |
          if ${{ inputs.subscription == 'Development' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.DEVELOPMENT_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: Development"
          elif ${{ inputs.subscription == 'Release Candidate' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.RELEASE_CANDIDATE_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.RELEASE_CANDIDATE_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.RELEASE_CANDIDATE_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.RELEASE_CANDIDATE_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: Release Candidate"
          elif ${{ inputs.subscription == 'ProductionGA' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.PRODUCTION_GA_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.PRODUCTION_GA_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.PRODUCTION_GA_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.PRODUCTION_GA_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: Production GA"
          else
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.DEVELOPMENT_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: None (Defaulted to Development)"
          fi

      - name: Deploy To Subscription
        id: deploy_step
        run: |
          set -e
          set -x
          ls -l
          exec 5>&1

          sed -i 's/$AZURE_SUBSCRIPTION_ID/'"$AZURE_SUBSCRIPTION_ID"'/g' deploy_config.sh
          sed -i 's/$AZURE_TENANT_ID/'"$AZURE_TENANT_ID"'/g' deploy_config.sh
          sed -i 's/$AZURE_CLIENT_ID/'"$AZURE_CLIENT_ID"'/g' deploy_config.sh
          sed -i 's/$AZURE_CLIENT_SECRET/'"$AZURE_CLIENT_SECRET"'/g' deploy_config.sh
          sed -i 's/$AZURE_OBJECT_ID/'"$AZURE_OBJECT_ID"'/g' deploy_config.sh
          sed -i 's/$SLACK_WEBHOOK_URL/'"$SLACK_WEBHOOK_URL"'/g' deploy_config.sh
          sed -i 's/$DOCKER_REGISTRY_URL/'"$DOCKER_REGISTRY_URL"'/g' deploy_config.sh
          sed -i 's/$DOCKER_REGISTRY_USERNAME/'"$DOCKER_REGISTRY_USERNAME"'/g' deploy_config.sh

          # Kindly ensure that the password does not contain @
          sed -i 's@$DOCKER_REGISTRY_PASSWORD@'"$DOCKER_REGISTRY_PASSWORD"'@g' deploy_config.sh
          if ${{ inputs.api_services_tag != 'default'}}
          then
            sed -i 's/$API_SERVICES_TAG/'"${{ inputs.api_services_tag }}"'/g' deploy_config.sh
          fi
          if ${{ inputs.audit_service_tag != 'default'}}
          then
            sed -i 's/$AUDIT_SERVICES_TAG/'"${{ inputs.audit_service_tag }}"'/g' deploy_config.sh
          fi
          if ${{ inputs.aggregator_scn_tag != 'default'}}
          then
            sed -i 's/$AGGREGATOR_SCN_TAG/'"${{ inputs.aggregator_scn_tag }}"'/g' deploy_config.sh
          fi
          if ${{ inputs.participant_scn_tag != 'default'}}
          then
            sed -i 's/$PARTICIPANT_SCN_TAG/'"${{ inputs.participant_scn_tag }}"'/g' deploy_config.sh
          fi

          DEPLOY_OUTPUT=$(sudo -E ./DeployPlatform.sh -p ${{ inputs.purpose }} -o ${{ inputs.owner }} -c | tee >(cat - >&5))
          INTERNAL_ADDR_API_SERVICE=$(echo "$DEPLOY_OUTPUT" | grep  "SAIL API Services is hosted internally on: https://172" | cut -f3  -d "/" |tee >(cat - >&5))
          echo "INTERNAL_IP_ADDR=$INTERNAL_ADDR_API_SERVICE" >> $GITHUB_ENV
          DEPLOY_GUID_ID=$(echo "$DEPLOY_OUTPUT" | grep  "Deployment GUID:" | cut -f2  -d ":" |tee >(cat - >&5))
          echo "DEPLOY_ID=$DEPLOY_GUID_ID" >> $GITHUB_ENV

      - name: Preload Datasets
        if: ${{ inputs.preload_dataset == true }}
        run: |
            cd DatasetTool/
            export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
            /root/.dotnet/dotnet build
            /root/.dotnet/dotnet publish -c Release
            bin/Release/net6.0/linux-x64/publish/DatasetTool --email lbart@igr.com --password SailPassword@123 --config SampleData/igr_config.json --ip $INTERNAL_IP_ADDR
            bin/Release/net6.0/linux-x64/publish/DatasetTool --email nadams@mghl.com --password SailPassword@123 --config SampleData/mghl_config.json --ip $INTERNAL_IP_ADDR

      - name: Run Tests
        if: ${{ inputs.run_tests == true }} && ${{ inputs.preload_dataset == true }}
        env:
          PAT: ${{ secrets.JENKINS_BUILD_TOKEN }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          deploy_output_str=$INTERNAL_IP_ADDR
          INTERNAL_IP_ADDR=${deploy_output_str%:*}
          docker build -t ubuntu-sailtap:1.0 --build-arg git_personal_token=$PAT --build-arg branch=$BRANCH_NAME -f CI_CD/Jenkins/Nightly_Tests/Dockerfile.test .
          docker run --name ubuntu_tst_bash -dit ubuntu-sailtap:1.0 /bin/bash
          docker exec -w /Test/ApiServices/tests ubuntu_tst_bash sh -c "pytest workflow_tests/test_api/test_backend/sail_portal_api_test.py -m "fastapi" -sv --ip $INTERNAL_IP_ADDR  --port 8000"
          docker exec -w /Test/ApiServices/tests ubuntu_tst_bash sh -c "pytest workflow_tests/test_api/test_backend/sail_organization_api_test.py -m "fastapi" -sv --ip $INTERNAL_IP_ADDR  --port 8000"
          docker exec -w /Test/ApiServices/tests ubuntu_tst_bash sh -c "pytest workflow_tests/test_api/test_backend/dataset_mgmt_api_test.py -m "azure" -sv --ip $INTERNAL_IP_ADDR  --port 8000"
          docker kill ubuntu_tst_bash || true && docker rm ubuntu_tst_bash || true

      - name: Deprovision Deployment
        if: ${{ inputs.deprovision_after == true }}
        run: |
          echo "Purpose of Deployment: ${{ inputs.purpose }}"
          echo "Owner of Deployment: ${{ inputs.owner }}"
          echo "This is GUID of DEPLOYMENT for this CI RUN: $$DEPLOY_ID"
          set -e
          if [ "$$DEPLOY_ID" = "" ] || [ "$$DEPLOY_ID" = " " ] || [ ! "$$DEPLOY_ID" ]; then
            echo "Deploy Canceled/Failed: Deprovision canceled."
          else
            chmod +x Deprovision.sh
            sudo -E ./Deprovision.sh -o CI_RUNNER <<<$(printf "3\n1\n${$DEPLOY_ID}\ny\n")
          fi
