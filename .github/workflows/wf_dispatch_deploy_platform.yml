# Engineering
# wf_dispatch_deploy_platform.yml
# Deployment of Platform Services [api + Frontend] to a specified Subscription in Azure
#
# Copyright (C) 2022 Secure Ai Labs, Inc. All Rights Reserved.
# Private and Confidential. Internal Use Only.
#
#     This software contains proprietary information which shall not
#     be reproduced or transferred to other documents and shall not
#     be disclosed to others for any purpose without
#     prior written permission of Secure Ai Labs, Inc.
#
#

name: "Deploy Platform to Azure"

permissions:
  checks: read

on:
  workflow_call:
    inputs:
      subscription:
        description: "Choose Subscription"
        required: true
        type: string
        default: "Development"
      purpose:
        description: "Purpose of Deployment"
        required: true
        type: string
        default: "CI_TEST"
      owner:
        description: "Owner of Deployment"
        required: true
        type: string
        default: "CI_RUNNER"
      api_services_tag:
        description: "API Services Docker image Tag"
        required: true
        type: string
        default: "default"
      audit_service_tag:
        description: "Audit Service Docker image Tag"
        required: true
        type: string
        default: "default"
      aggregator_scn_tag:
        description: "Aggregator SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      participant_scn_tag:
        description: "Participant SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      preload_dataset:
        description: "Preload dataset with DatasetTool"
        required: true
        type: boolean
        default: false
      run_tests:
        description: Runs tests
        required: true
        type: boolean
        default: false
      deprovision_after:
        description: Deprovision after deployment
        required: true
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      subscription:
        description: "Choose Subscription"
        required: true
        type: choice
        default: "Development"
        options:
          - "Development"
          - "Release Candidate"
          - "ProductionGA"
      purpose:
        description: "Purpose of Deployment"
        required: true
        type: string
        default: "CI_TEST"
      api_services_tag:
        description: "API Services Docker image Tag"
        required: true
        type: string
        default: "default"
      audit_service_tag:
        description: "Audit Service Docker image Tag"
        required: true
        type: string
        default: "default"
      aggregator_scn_tag:
        description: "Aggregator SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      participant_scn_tag:
        description: "Participant SCN Docker image Tag"
        required: true
        type: string
        default: "default"
      owner:
        description: "Owner of Deployment"
        required: true
        type: string
        default: "CI_RUNNER"
      preload_dataset:
        description: "Preload dataset with DatasetTool"
        required: true
        type: boolean
        default: false
      run_tests:
        description: Runs tests [Requires preloaded dataset]
        required: true
        type: boolean
        default: false
      deprovision_after:
        description: Deprovision after deployment
        required: true
        type: boolean
        default: false

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_DEPLOYPLATFORM_AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_DEPLOYPLATFORM_AZURE_CLIENT_SECRET }}
  AZURE_OBJECT_ID: ${{ secrets.AZURE_OBJECT_ID }}
  PUBLIC_IP: "False"

jobs:
  Setup_Environment:
    runs-on: [self-hosted, Linux, x64, docker, Platform]
    steps:
      - name: Options selected
        run: |
          echo "## Options Selected" >> $GITHUB_STEP_SUMMARY
          echo "Subscription: ${{ inputs.subscription }}" >> $GITHUB_STEP_SUMMARY
          echo "Preload Datasets: ${{ inputs.preload_dataset }}" >> $GITHUB_STEP_SUMMARY
          echo "Purpose of Deployment: ${{ inputs.purpose }}" >> $GITHUB_STEP_SUMMARY
          echo "Owner of Deployment: ${{ inputs.owner }}" >> $GITHUB_STEP_SUMMARY
          echo "Container used [api_services_tag]: ${{ inputs.api_services_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Container used [audit_service_tag]: ${{ inputs.audit_service_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Container used [aggregator_scn_tag]: ${{ inputs.aggregator_scn_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Container used [participant_scn_tag]: ${{ inputs.participant_scn_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "Run Tests after Deployment: ${{ inputs.run_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "Deprovision when finished: ${{ inputs.deprovision_after }}" >> $GITHUB_STEP_SUMMARY

      - name: Clear repository
        run: sudo rm -fr $GITHUB_WORKSPACE && mkdir $GITHUB_WORKSPACE

      - name: Check out source repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_BUILD_TOKEN }}
          persist-credentials: true
          submodules: true

  Deploy_Platform:
    runs-on: [self-hosted, Linux, x64, docker, Platform]
    needs: Setup_Environment
    outputs:
      internal_ip_addr: ${{ steps.deploy_step.outputs.INTERNAL_IP_ADDR }}
      deployment_id: ${{ steps.deploy_step.outputs.DEPLOY_ID }}
    steps:
      - name: Determine Subscription
        run: |
          if ${{ inputs.subscription == 'Development' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.DEVELOPMENT_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: Development" >> $GITHUB_STEP_SUMMARY
          elif ${{ inputs.subscription == 'Release Candidate' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.RELEASE_CANDIDATE_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.RELEASE_CANDIDATE_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.RELEASE_CANDIDATE_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.RELEASE_CANDIDATE_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: Release Candidate" >> $GITHUB_STEP_SUMMARY
          elif ${{ inputs.subscription == 'ProductionGA' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.PRODUCTION_GA_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.PRODUCTION_GA_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.PRODUCTION_GA_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.PRODUCTION_GA_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: Production GA" >> $GITHUB_STEP_SUMMARY
          else
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.DEVELOPMENT_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_URL=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_URL }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_USERNAME=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_USERNAME }}" >> $GITHUB_ENV
            echo "DOCKER_REGISTRY_PASSWORD=${{ secrets.DEVELOPMENT_DOCKER_REGISTRY_PASSWORD }}" >> $GITHUB_ENV
            echo "Subscription: None (Defaulted to Development)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Deploy To Subscription
        id: deploy_step
        run: |
          echo "${{ github.head_ref }}"
          echo "${{ github.workspace }}"
          sudo chown -R $USER:$USER ${{ github.workspace }}
          set -e
          pwd
          ls -l
          exec 5>&1
          mkdir -p Binary

          sed -i 's/$AZURE_SUBSCRIPTION_ID/'"$AZURE_SUBSCRIPTION_ID"'/g' deploy_config.sh
          sed -i 's/$AZURE_TENANT_ID/'"$AZURE_TENANT_ID"'/g' deploy_config.sh
          sed -i 's/$AZURE_CLIENT_ID/'"$AZURE_CLIENT_ID"'/g' deploy_config.sh
          sed -i 's/$AZURE_CLIENT_SECRET/'"$AZURE_CLIENT_SECRET"'/g' deploy_config.sh
          sed -i 's/$AZURE_OBJECT_ID/'"$AZURE_OBJECT_ID"'/g' deploy_config.sh
          sed -i 's/$SLACK_WEBHOOK_URL/'"$SLACK_WEBHOOK_URL"'/g' deploy_config.sh
          sed -i 's/$DOCKER_REGISTRY_URL/'"$DOCKER_REGISTRY_URL"'/g' deploy_config.sh
          sed -i 's/$DOCKER_REGISTRY_USERNAME/'"$DOCKER_REGISTRY_USERNAME"'/g' deploy_config.sh
          # Kindly ensure that the password does not contain @
          sed -i 's@$DOCKER_REGISTRY_PASSWORD@'"$DOCKER_REGISTRY_PASSWORD"'@g' deploy_config.sh
          if ${{ inputs.api_services_tag != 'default'}}
          then
            sed -i 's/$API_SERVICES_TAG/'"${{ inputs.api_services_tag }}"'/g' deploy_config.sh
          fi
          if ${{ inputs.audit_service_tag != 'default'}}
          then
            sed -i 's/$AUDIT_SERVICES_TAG/'"${{ inputs.audit_service_tag }}"'/g' deploy_config.sh
          fi
          if ${{ inputs.aggregator_scn_tag != 'default'}}
          then
            sed -i 's/$AGGREGATOR_SCN_TAG/'"${{ inputs.aggregator_scn_tag }}"'/g' deploy_config.sh
          fi
          if ${{ inputs.participant_scn_tag != 'default'}}
          then
            sed -i 's/$PARTICIPANT_SCN_TAG/'"${{ inputs.participant_scn_tag }}"'/g' deploy_config.sh
          fi

          DEPLOY_OUTPUT=$(sudo -E ./DeployPlatform.sh -p ${{ inputs.purpose }} -o ${{ inputs.owner }} |tee >(cat - >&5))
          INTERNAL_ADDR_API_SERVICE=$(echo "$DEPLOY_OUTPUT" | grep  "SAIL API Services is hosted internally on: https://172" | cut -f3  -d "/" | tee >(cat - >&5))
          echo "INTERNAL_IP_ADDR=$INTERNAL_ADDR_API_SERVICE" >> $GITHUB_OUTPUT
          echo "Sail API Services is hosted internally on: https://$INTERNAL_ADDR_API_SERVICE " >> $GITHUB_STEP_SUMMARY
          DEPLOY_GUID_ID=$(echo "$DEPLOY_OUTPUT" | grep  "Deployment GUID:" | cut -f2  -d ":" | tee >(cat - >&5))
          echo "DEPLOY_ID=$DEPLOY_GUID_ID" >> $GITHUB_OUTPUT
          echo "Deployment GUID: $DEPLOY_GUID_ID " >> $GITHUB_STEP_SUMMARY
          echo "## Preload Dataset" >> $GITHUB_STEP_SUMMARY
          if ${{ inputs.preload_dataset == true }}; then
            cd DatasetTool/
            ls -lrt
            /home/gha-runner/.dotnet/dotnet build
            /home/gha-runner/.dotnet/dotnet publish -c Release
            dataset_output01=$(bin/Release/net6.0/linux-x64/publish/DatasetTool --email lbart@igr.com --password SailPassword@123 --config SampleData/igr_config.json --ip $INTERNAL_ADDR_API_SERVICE)
            dataset_output02=$(bin/Release/net6.0/linux-x64/publish/DatasetTool --email nadams@mghl.com --password SailPassword@123 --config SampleData/mghl_config.json --ip $INTERNAL_ADDR_API_SERVICE)
            echo "### Dataset 1" >> $GITHUB_STEP_SUMMARY
            echo "$dataset_output01" >> $GITHUB_STEP_SUMMARY
            echo "### Dataset 2" >> $GITHUB_STEP_SUMMARY
            echo "$dataset_output02" >> $GITHUB_STEP_SUMMARY
          else
            echo "Not Preloading Datasets." >> $GITHUB_STEP_SUMMARY
          fi

  Test:
    runs-on: [self-hosted, Linux, x64, docker, Platform]
    if: ${{ inputs.run_tests == true }}
    needs: Deploy_Platform
    steps:
      - name: Run Tests
        env:
          PAT: ${{ secrets.JENKINS_BUILD_TOKEN }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: |
          sudo chown -R $USER:$USER ${{ github.workspace }}
          if ${{ inputs.run_tests == true }}; then
            deploy_output_str=${{needs.Deploy_Platform.outputs.internal_ip_addr}}
            INTERNAL_IP_ADDR=${deploy_output_str%:*}
            docker stop ubuntu_tst_bash || true && docker rm ubuntu_tst_bash || true
            docker build -t ubuntu-sailtap:1.0 --build-arg git_personal_token=$PAT --build-arg branch=$BRANCH_NAME -f CI_CD/Jenkins/Nightly_Tests/Dockerfile.test .
            docker run --name ubuntu_tst_bash -dit ubuntu-sailtap:1.0 /bin/bash
            user_test_output=$(docker exec -w /Test/ApiServices/tests ubuntu_tst_bash sh -c "pytest workflow_tests/test_api/test_backend/sail_portal_api_test.py -m "fastapi" -sv --ip $INTERNAL_IP_ADDR  --port 8000")
            org_test_output=$(docker exec -w /Test/ApiServices/tests ubuntu_tst_bash sh -c "pytest workflow_tests/test_api/test_backend/sail_organization_api_test.py -m "fastapi" -sv --ip $INTERNAL_IP_ADDR  --port 8000")
            dataset_test_output=$(docker exec -w /Test/ApiServices/tests ubuntu_tst_bash sh -c "pytest workflow_tests/test_api/test_backend/dataset_mgmt_api_test.py -m "azure" -sv --ip $INTERNAL_IP_ADDR  --port 8000")
            echo "### sail_portal_api_test.py" >>  $GITHUB_STEP_SUMMARY
            for line in $user_test_output
            do
              if [ "${line::15}" == "workflow_tests/" ]; then
                echo "-${line##*::}" >>  $GITHUB_STEP_SUMMARY
              fi
            done
            echo "### sail_organization_api_test.py" >>  $GITHUB_STEP_SUMMARY
            for line in $org_test_output
            do
              if [ "${line::15}" == "workflow_tests/" ]; then
                echo "-${line##*::}" >>  $GITHUB_STEP_SUMMARY
              fi
            done
            echo "### dataset_mgmt_api_test.py" >>  $GITHUB_STEP_SUMMARY
            for line in $dataset_test_output
            do
              if [ "${line::15}" == "workflow_tests/" ]; then
                echo "-${line##*::}" >>  $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          docker kill ubuntu_tst_bash || true && docker rm ubuntu_tst_bash || true

          workflow_tests/test_api/test_backend/sail_portal_api_test.py::test_fastapi_login_entry[lbart@igr.com-SailPassword@123] PASSED

  Check_Test_Selection:
    runs-on: [self-hosted, Linux, x64, docker, Platform]
    needs: [Deploy_Platform, Test]
    if: |
      always() &&
      (needs.Test.result == 'success' || needs.Test.result == 'skipped')
    outputs:
      check: ${{ steps.check.outputs.run_test }}
    steps:
      - name: Verified Test option selected
        id: check
        run: |
          if ${{ inputs.run_tests == true }}; then
            echo "run_test=yes" >> $GITHUB_OUTPUT
            echo "Run Tests: YES" >> $GITHUB_STEP_SUMMARY
          else
            echo "run_test=no" >> $GITHUB_OUTPUT
            echo "Run Tests: NO" >> $GITHUB_STEP_SUMMARY
          fi

  Deprovision_Platform:
    runs-on: [self-hosted, Linux, x64, docker, Platform]
    env:
      CHECKTESTRAN: ${{needs.Check_Test_Selection.outputs.check}}
    if: |
      always() &&
      (needs.Check_Test_Selection.result == 'success')
    needs: [Deploy_Platform, Check_Test_Selection]
    steps:
      - name: Deprovision Parameters
        run: |
          echo "## Deprovision Platform" >> $GITHUB_STEP_SUMMARY
          if ${{ inputs.deprovision_after == true }}; then
            echo "Purpose of Deployment: ${{ inputs.purpose }}"
            echo "Owner of Deployment: ${{ inputs.owner }}"
            deployment_id="${{needs.Deploy_Platform.outputs.deployment_id}}"
            echo "This is GUID of DEPLOYMENT for this CI RUN: $deployment_id"
          else
            echo "Step Display Deprovision Parameters not required" >> $GITHUB_STEP_SUMMARY
            echo "deprovision_after option was not selected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Determine Subscription
        run: |
          if ${{ inputs.subscription == 'Development' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.DEVELOPMENT_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "Subscription: Development" >> $GITHUB_STEP_SUMMARY
          elif ${{ inputs.subscription == 'Release Candidate' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.RELEASE_CANDIDATE_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "Subscription: Release Candidate" >> $GITHUB_STEP_SUMMARY
          elif ${{ inputs.subscription == 'ProductionGA' }}; then
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.PRODUCTION_GA_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "Subscription: Production GA" >> $GITHUB_STEP_SUMMARY
          else
            echo "AZURE_SUBSCRIPTION_ID=${{ secrets.DEVELOPMENT_AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "Subscription: None (Defaulted to Development)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Deprovision
        run: |
          if ${{ inputs.deprovision_after == true }}; then
            echo "Purpose of Deployment: ${{ inputs.purpose }}" >> $GITHUB_STEP_SUMMARY
            echo "Owner of Deployment: ${{ inputs.owner }}" >> $GITHUB_STEP_SUMMARY
            deployment_id="${{needs.Deploy_Platform.outputs.deployment_id}}"
            echo "This is GUID of DEPLOYMENT for this CI RUN: $deployment_id" >> $GITHUB_STEP_SUMMARY
            set -e
            pwd
            if [ "$deployment_id" = "" ] || [ "$deployment_id" = " " ] || [ ! "$deployment_id" ]; then
              echo "Deploy Canceled/Failed: Deprovision canceled." >> $GITHUB_STEP_SUMMARY
            else
              sudo chmod +x Deprovision.sh
              deprov_output=$(sudo -E ./Deprovision.sh -o CI_RUNNER <<<$(printf "3\n1\n${deployment_id}\ny\n"))
              deprov_substr=$(echo "${deprov_output##*PROCEEDING...}")
              echo "$deprov_substr" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "Step Deprovision not required" >> $GITHUB_STEP_SUMMARY
            echo "deprovision_after option was not selected" >> $GITHUB_STEP_SUMMARY
          fi
