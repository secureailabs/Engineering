# CI workflow Docker Build
name: CI for Development Repository
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [main]

# Only one concurrent action at a time for group tag.
concurrency:
  group: ${{ github.head_ref || github.run_id }}

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.DEVELOPMENT_AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.SERVICE_PRINCIPAL_DEPLOYPLATFORM_AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.SERVICE_PRINCIPAL_DEPLOYPLATFORM_AZURE_CLIENT_SECRET }}
  AZURE_OBJECT_ID: ${{ secrets.AZURE_OBJECT_ID }}

jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          # Module level import not at top of file (E402)
          # Block comment should start with '# ' (E265)
          # Local variable name is assigned to but never used (F841)
          # f-string without any placeholders (F541)
          # Multiple statements on one line (semicolon) (E702)
          # Module imported but unused (F401)
          # Line too long (82 &gt; 79 characters) (E501)
          # Line break occurred before a binary operator (W503)
          ignore: "E402,E265,F841,F541,E702,F401,E501,W503"
          max-line-length: 120
          path: "ApiServices"

  start-runner:
    runs-on: ubuntu-latest
    steps:
      - name: Output HeadRef
        run: echo "${{ github.head_ref }}"

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Start self-hosted runner
        run: |
          az vm start --subscription Build -g Dev-CI -n github-runner1
          az vm start --subscription Build -g Dev-CI -n github-runner2-DeployPlatform

  clean:
    runs-on: [self-hosted, Linux, x64, docker]
    needs: start-runner
    steps:
      - name: cleanup
        run: |
          echo "${{ github.head_ref }}"
          echo "${{ github.workspace }}"
          sudo chown -R $USER:$USER ${{ github.workspace }}
          docker image prune --all -f

  build:
    runs-on: [self-hosted, Linux, x64, docker]
    needs: clean
    steps:
      - name: build
        run: |
          echo "entered build job"
  # - name: Clear repository
  #   run: sudo rm -rf $GITHUB_WORKSPACE && mkdir $GITHUB_WORKSPACE

  #     - name: Check out source repository
  #       uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.JENKINS_BUILD_TOKEN }}
  #         persist-credentials: true
  #         submodules: true

  #     - name: Run a multi-line script, Build Binaries
  #       env:
  #         PAT: ${{ secrets.JENKINS_BUILD_TOKEN }}
  #       run: |
  #         set -e
  #         pwd
  #         ls -l
  #         sudo chmod 666 /var/run/docker.sock
  #         docker stop ubuntu_dev_CI || true && docker rm ubuntu_dev_CI || true
  #         docker build --no-cache -t ubuntu-ci:1.0 --build-arg git_personal_token=$PAT -f CI_CD/Dockerfile.ci .
  #         docker run --name ubuntu_dev_CI -dit -v /var/run/docker.sock:/var/run/docker.sock -v ${PWD}:/Workspace -w="/Workspace" ubuntu-ci:1.0 /bin/bash
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "git config --global --add safe.directory '*'"
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "git submodule update"
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "docker --version"
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "ls -l"
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "make clean"
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "ls -l"
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "make all"
  #         docker exec -w /Workspace ubuntu_dev_CI sh -c "ls -l"
  #         docker ps -a

  #     - name: Dump docker logs on failure
  #       if: failure()
  #       uses: jwalton/gh-docker-logs@v2
  #       with:
  #         images: "apiservices"
  #         tail: "300"

  teardown:
    runs-on: [self-hosted, Linux, x64, docker]
    if: ${{ always() }}
    needs: build
    steps:
      - name: Stop and Remove Docker Containers
        run: |
          echo "entered Teardown Job"
  # set -e
  # docker ps -a
  # docker kill $(docker ps -q)
  # docker rm $(docker ps -a -q)
  # sudo make clean

  call-deploy-platform-workflow:
    needs: build
    uses: ./.github/workflows/deploy_platform.yml
    with:
      subscription: "Development"
      purpose: "PR-${{ github.event.pull_request.number }}"
      owner: "CI_RUNNER"
      preload_dataset: false
      run_tests: true
      deprovision_after: true
    secrets: inherit

  # stop-runner:
  #   # Always stop runner even if build step fails
  #   if: always()
  #   runs-on: ubuntu-latest
  #   needs: [start-runner, build, teardown]
  #   steps:
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Deallocate self-hosted runner
  #       run: |
  #         pwd
  #         ls -l
  #         az vm deallocate  --subscription Build -g Dev-CI -n github-runner1 --no-wait

  workflow-conclusion:
    # Without this step workflow remains "green" if build does fail.
    if: always()
    runs-on: ubuntu-latest
    needs: [start-runner, build, call-deploy-platform-workflow]
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Job Status status and fail if they are red
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
